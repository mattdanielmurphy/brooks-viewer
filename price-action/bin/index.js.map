{"version":3,"sources":["../src/index.js"],"names":["createCsvWriter","require","createArrayCsvWriter","fs","fsSync","promises","config","file","__dirname","adapter","JSONFile","db","Low","setUpPuppeteer","browser","puppeteer","launch","headless","page","newPage","on","msg","i","args","length","console","log","signIn","waitForSelector","type","process","env","USERNAME","PASSWORD","Promise","all","waitForNavigation","waitUntil","click","getListOfPosts","evaluate","elements","document","querySelectorAll","results","el","author","firstChild","innerText","numReplies","parentNode","title","url","href","regex","RegExp","originalDateString","exec","monthString","dayString","yearString","split","dateString","push","getAnalysisPostsForPage","posts","filter","titleDoesNotContain","slice","call","arguments","every","string","toLowerCase","includes","savePostsToCSVs","analysisPosts","post","entries","data","daySavedAsCSV","stdout","write","goto","catch","err","error","analysisHTML","innerHTML","splitAnalysisHTML","analysis","map","filePath","path","join","csvWriter","header","writeRecords","monthSavedAsCSV","scrapeAllPages","onlyFirstPage","read","finalIndex","getPostsForMonth","year","month","currentMonth","Date","getMonth","monthIsCurrentMonth","dirPath","String","scrape","scraping","close"],"mappings":"AAAA;;;AAEA;;AAEA;;AACA;;AAEA;;AAEA;;AACA;;AACA;;AACA;;AAEA;;;;;;;;AAXA;AAKA;AAQA,MAAMA,eAAe,GAAGC,OAAO,CAAC,YAAD,CAAP,CAAsBC,oBAA9C;;AAEA,MAAMC,EAAE,GAAGC,YAAOC,QAAlB;;AACAJ,OAAO,CAAC,QAAD,CAAP,CAAkBK,MAAlB,G,CAEA;;;AACA,MAAMC,IAAI,GAAG,gBAAKC,SAAL,EAAgB,KAAhB,EAAuB,SAAvB,CAAb;AACA,MAAMC,OAAO,GAAG,IAAIC,eAAJ,CAAaH,IAAb,CAAhB;AACA,MAAMI,EAAE,GAAG,IAAIC,UAAJ,CAAQH,OAAR,CAAX,C,CAEA;AACA;AACA;;AAEA,eAAeI,cAAf,GAAgC;AAC/B,QAAMC,OAAO,GAAG,MAAMC,mBAAUC,MAAV,CAAiB;AAAEC,IAAAA,QAAQ,EAAE;AAAZ,GAAjB,CAAtB;AACA,QAAMC,IAAI,GAAG,MAAMJ,OAAO,CAACK,OAAR,EAAnB,CAF+B,CAG/B;;AACAD,EAAAA,IAAI,CAACE,EAAL,CAAQ,SAAR,EAAoBC,GAAD,IAAS;AAC3B,SAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGD,GAAG,CAACE,IAAJ,GAAWC,MAA/B,EAAuC,EAAEF,CAAzC,EACCG,OAAO,CAACC,GAAR,CAAa,GAAEJ,CAAE,KAAID,GAAG,CAACE,IAAJ,GAAWD,CAAX,CAAc,EAAnC;AACD,GAHD;AAIA,SAAO,CAACR,OAAD,EAAUI,IAAV,CAAP;AACA;;AAED,eAAeS,MAAf,CAAsBT,IAAtB,EAA4B;AAC3B,QAAMA,IAAI,CAACU,eAAL,CAAqB,wBAArB,CAAN;AACA,QAAMV,IAAI,CAACW,IAAL,CAAU,wBAAV,EAAoCC,OAAO,CAACC,GAAR,CAAYC,QAAhD,CAAN;AACA,QAAMd,IAAI,CAACW,IAAL,CAAU,wBAAV,EAAoCC,OAAO,CAACC,GAAR,CAAYE,QAAhD,CAAN;AACA,QAAMC,OAAO,CAACC,GAAR,CAAY,CACjB;AACAjB,EAAAA,IAAI,CAACkB,iBAAL,CAAuB;AAAEC,IAAAA,SAAS,EAAE;AAAb,GAAvB,CAFiB,EAGjBnB,IAAI,CAACoB,KAAL,CAAW,qBAAX,CAHiB,CAAZ,CAAN;AAKA,QAAMpB,IAAI,CAACU,eAAL,CAAqB,YAArB,CAAN;AACA;;AAED,eAAeW,cAAf,CAA8BrB,IAA9B,EAAoC;AACnC,SAAO,MAAM,MAAMA,IAAI,CAACsB,QAAL,CAAc,MAAM;AACtC,UAAMC,QAAQ,GAAGC,QAAQ,CAACC,gBAAT,CAA0B,aAA1B,CAAjB;AACA,UAAMC,OAAO,GAAG,EAAhB;;AACA,SAAK,MAAMC,EAAX,IAAiBJ,QAAjB,EAA2B;AAC1B,YAAMK,MAAM,GAAGD,EAAE,CAACE,UAAH,CAAcC,SAA7B;AACA,YAAMC,UAAU,GAAGJ,EAAE,CAACK,UAAH,CAAcA,UAAd,CAAyBP,gBAAzB,CAClB,gDADkB,EAEjB,CAFiB,EAEdK,SAFL;AAGA,YAAMG,KAAK,GACVN,EAAE,CAACK,UAAH,CAAcA,UAAd,CAAyBP,gBAAzB,CAA0C,cAA1C,EAA0D,CAA1D,EAA6DK,SAD9D;AAEA,YAAMI,GAAG,GACRP,EAAE,CAACK,UAAH,CAAcA,UAAd,CAAyBP,gBAAzB,CAA0C,cAA1C,EAA0D,CAA1D,EAA6DU,IAD9D,CAP0B,CAU1B;;AACA,YAAMC,KAAK,GAAGC,MAAM,CAAC,iBAAD,CAApB;AACA,YAAMC,kBAAkB,GAAGF,KAAK,CAACG,IAAN,CAAWN,KAAX,EAAkB,CAAlB,CAA3B;AACA,YAAM,CAACO,WAAD,EAAcC,SAAd,EAAyBC,UAAzB,IAAuCJ,kBAAkB,CAACK,KAAnB,CAAyB,GAAzB,CAA7C;AACA,YAAMC,UAAU,GAAGF,UAAU,GAAG,GAAb,GAAmBF,WAAnB,GAAiC,GAAjC,GAAuCC,SAA1D;AACAf,MAAAA,OAAO,CAACmB,IAAR,CAAa,CAACZ,KAAD,EAAQL,MAAR,EAAgBG,UAAhB,EAA4BG,GAA5B,EAAiCU,UAAjC,CAAb;AACA;;AACD,WAAOlB,OAAP;AACA,GArBkB,CAAnB;AAsBA;;AAED,eAAeoB,uBAAf,CAAuC9C,IAAvC,EAA6C;AAC5C,QAAM+C,KAAK,GAAG,MAAM1B,cAAc,CAACrB,IAAD,CAAlC;AACA,SAAO,MAAM+C,KAAK,CAACC,MAAN,CAAa,CAAC,CAACf,KAAD,EAAQL,MAAR,EAAgBG,UAAhB,CAAD,KAAiC;AAC1D,aAASkB,mBAAT,GAA+B;AAC9B,YAAM5C,IAAI,GAAG,GAAG6C,KAAH,CAASC,IAAT,CAAcC,SAAd,CAAb;AACA,aAAO/C,IAAI,CAACgD,KAAL,CACLC,MAAD,IAAY,CAACrB,KAAK,CAACsB,WAAN,GAAoBC,QAApB,CAA6BF,MAAM,CAACC,WAAP,EAA7B,CADP,CAAP;AAGA;;AAED,WACEN,mBAAmB,CAAC,YAAD,EAAe,SAAf,CAAnB,IAAgDrB,MAAM,KAAK,UAA5D,IACCA,MAAM,KAAK,UAAX,IAAyBG,UAAU,GAAG,CAFxC;AAIA,GAZY,CAAb;AAaA;;AAED,eAAe0B,eAAf,CAA+BzD,IAA/B,EAAqC0D,aAArC,EAAoD;AACnD,OAAK,MAAM,CAACtD,CAAD,EAAIuD,IAAJ,CAAX,IAAwBD,aAAa,CAACE,OAAd,EAAxB,EAAiD;AAChD,UAAM;AAAE1B,MAAAA,GAAF;AAAOU,MAAAA;AAAP,QAAsBe,IAA5B;AACA,UAAM,CAACjB,UAAD,EAAaF,WAAb,EAA0BC,SAA1B,IAAuCG,UAAU,CAACD,KAAX,CAAiB,GAAjB,CAA7C;;AACA,QACClD,EAAE,CAACoE,IAAH,CAAQC,aAAR,CAAsBN,QAAtB,CACCd,UAAU,GAAG,GAAb,GAAmBF,WAAnB,GAAiC,GAAjC,GAAuCC,SADxC,CADD,EAIE;AACD7B,MAAAA,OAAO,CAACmD,MAAR,CAAeC,KAAf,CACE,QAAO5D,CAAC,GAAG,CAAE,OAAMsD,aAAa,CAACpD,MAAO,oBAD1C;AAGA;AACA;;AACDM,IAAAA,OAAO,CAACmD,MAAR,CAAeC,KAAf,CAAsB,iBAAgB5D,CAAC,GAAG,CAAE,OAAMsD,aAAa,CAACpD,MAAO,IAAvE;AAEA,UAAMN,IAAI,CAACiE,IAAL,CAAU/B,GAAV,CAAN;AACA,UAAMlC,IAAI,CACRU,eADI,CACY,WADZ,EAEJwD,KAFI,CAEGC,GAAD,IACNC,KAAK,CAAC5D,GAAN,CAAU,uDAAV,EAAmE2D,GAAnE,CAHI,CAAN,CAhBgD,CAqBhD;AACA;;AACA,UAAME,YAAY,GAAG,MAAMrE,IAAI,CAACsB,QAAL,CAC1B,MAAME,QAAQ,CAACC,gBAAT,CAA0B,WAA1B,EAAuC,CAAvC,EAA0C6C,SADtB,CAA3B;AAGA,UAAMC,iBAAiB,GAAGF,YAAY,CAAC1B,KAAb,CAAmB,MAAnB,CAA1B;AACA,UAAM6B,QAAQ,GAAGD,iBAAiB,CAACE,GAAlB,CAAuBnB,MAAD,IAAY,CAAC,4BAAWA,MAAX,CAAD,CAAlC,CAAjB;AAEA,UAAM,gCAAgBZ,UAAhB,EAA4BF,WAA5B,CAAN;;AACA,UAAMkC,QAAQ,GAAGC,cAAKC,IAAL,CAChBtF,SADgB,EAEhB,KAFgB,EAGhB,SAHgB,EAIhBoD,UAJgB,EAKhBF,WALgB,EAMf,GAAEE,UAAW,IAAGF,WAAY,IAAGC,SAAU,MAN1B,CAAjB;;AAQA,UAAMoC,SAAS,GAAG/F,eAAe,CAAC;AACjC6F,MAAAA,IAAI,EAAED,QAD2B;AAEjCI,MAAAA,MAAM,EAAE,CAAC5C,GAAD;AAFyB,KAAD,CAAjC;AAIA,UAAM2C,SAAS,CAACE,YAAV,CAAuBP,QAAvB,CAAN;AACA,QAAI,CAAC/E,EAAE,CAACoE,IAAH,CAAQmB,eAAR,CAAwBxB,QAAxB,CAAiCd,UAAU,GAAG,GAAb,GAAmBF,WAApD,CAAL,EACC/C,EAAE,CAACoE,IAAH,CAAQmB,eAAR,CAAwBnC,IAAxB,CAA6BH,UAAU,GAAG,GAAb,GAAmBF,WAAhD,EA5C+C,CA8ChD;;AACA/C,IAAAA,EAAE,CAACoE,IAAH,CAAQC,aAAR,CAAsBjB,IAAtB,CAA2BH,UAAU,GAAG,GAAb,GAAmBF,WAAnB,GAAiC,GAAjC,GAAuCC,SAAlE;AACA,UAAMhD,EAAE,CAACuE,KAAH,EAAN;AACA;AACD;;AAED,eAAeiB,cAAf,CAA8BjF,IAA9B,EAAoCkF,aAApC,EAAmD;AAClD,QAAMzF,EAAE,CAAC0F,IAAH,EAAN;AACA,QAAMC,UAAU,GAAGF,aAAa,GAAG,CAAH,GAAO,IAAvC,CAFkD,CAGlD;;AACA,OAAK,IAAI9E,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGgF,UAApB,EAAgChF,CAAC,IAAI,EAArC,EAAyC;AACxC,QAAIA,CAAC,KAAK,CAAV,EAAa;AACZ,YAAMJ,IAAI,CAACiE,IAAL,CAAU,qDAAV,CAAN;AACA,YAAMxD,MAAM,CAACT,IAAD,CAAZ;AACA,KAHD,MAGO;AACN,YAAMA,IAAI,CAACiE,IAAL,CACJ,yEAAwE7D,CAAE,EADtE,CAAN;AAGA;;AACD,UAAMsD,aAAa,GAAG,MAAMZ,uBAAuB,CAAC9C,IAAD,CAAnD;;AACA,SAAK,MAAM2D,IAAX,IAAmBD,aAAnB,EAAkC;AACjC,YAAM,KAAOxB,GAAP,EAAYU,UAAZ,IAA0Be,IAAhC;AACApD,MAAAA,OAAO,CAACC,GAAR,CAAY0B,GAAZ,EAAiBU,UAAjB;AACA,YAAM,CAACF,UAAD,EAAaF,WAAb,EAA0BC,SAA1B,IAAuCG,UAAU,CAACD,KAAX,CAAiB,GAAjB,CAA7C;;AACA,UAAI,CAAClD,EAAE,CAACoE,IAAH,CAAQd,KAAR,CAAcL,UAAd,CAAL,EAAgC;AAC/BjD,QAAAA,EAAE,CAACoE,IAAH,CAAQd,KAAR,CAAcL,UAAd,IAA4B,EAA5B;AACA,cAAMjD,EAAE,CAACuE,KAAH,EAAN;AACA;;AACD,UAAI,CAACvE,EAAE,CAACoE,IAAH,CAAQd,KAAR,CAAcL,UAAd,EAA0BF,WAA1B,CAAL,EAA6C;AAC5C/C,QAAAA,EAAE,CAACoE,IAAH,CAAQd,KAAR,CAAcL,UAAd,EAA0BF,WAA1B,IAAyC,EAAzC;AACA,cAAM/C,EAAE,CAACuE,KAAH,EAAN;AACA;;AACDvE,MAAAA,EAAE,CAACoE,IAAH,CAAQd,KAAR,CAAcL,UAAd,EAA0BF,WAA1B,EAAuCK,IAAvC,CAA4C;AAC3CX,QAAAA,GAD2C;AAE3CU,QAAAA;AAF2C,OAA5C;AAIA,YAAMnD,EAAE,CAACuE,KAAH,EAAN;AACA,KA3BuC,CA4BxC;;AACA;AACD;;AAED,eAAeqB,gBAAf,CAAgCrF,IAAhC,EAAsCsF,IAAtC,EAA4CC,KAA5C,EAAmD;AAClD;AACA,QAAMC,YAAY,GAAG,IAAIC,IAAJ,GAAWC,QAAX,KAAwB,CAA7C;AACA,QAAMC,mBAAmB,GAAGH,YAAY,KAAKD,KAA7C,CAHkD,CAIlD;;AACA,MAAII,mBAAJ,EAAyB;AACxB;AACA/E,IAAAA,OAAO,CAACmD,MAAR,CAAeC,KAAf,CAAqB,iBAArB;AACA,UAAMhE,IAAI,CAACiE,IAAL,CAAU,qDAAV,CAAN;AACA,UAAMxD,MAAM,CAACT,IAAD,CAAZ,CAJwB,CAKxB;;AAEAY,IAAAA,OAAO,CAACmD,MAAR,CAAeC,KAAf,CACC,wDADD;AAGA,UAAMiB,cAAc,CAACjF,IAAD,EAAO,IAAP,CAApB;AACAO,IAAAA,OAAO,CAACC,GAAR,CAAY,eAAZ;AACA,UAAMuC,KAAK,GAAGtD,EAAE,CAACoE,IAAH,CAAQd,KAAR,CAAcuC,IAAd,EAAoBC,KAApB,CAAd;AACA,UAAM9B,eAAe,CAACzD,IAAD,EAAO+C,KAAP,CAArB;AACAxC,IAAAA,OAAO,CAACC,GAAR,CAAY,aAAZ;AACA,GAfD,MAeO,IAAIf,EAAE,CAACoE,IAAH,CAAQmB,eAAR,CAAwBxB,QAAxB,CAAiC8B,IAAI,GAAG,GAAP,GAAaC,KAA9C,CAAJ,EAA0D;AAChE;AACAhF,IAAAA,OAAO,CAACC,GAAR,CAAY,oCAAZ;AACA,GAHM,MAGA;AACN;AACAI,IAAAA,OAAO,CAACmD,MAAR,CAAeC,KAAf,CAAqB,iBAArB;AACA,UAAMhE,IAAI,CAACiE,IAAL,CAAU,qDAAV,CAAN;AACA,UAAMxD,MAAM,CAACT,IAAD,CAAZ,CAJM,CAKN;;AACA,UAAM+C,KAAK,GAAGtD,EAAE,CAACoE,IAAH,CAAQd,KAAR,CAAcuC,IAAd,EAAoBC,KAApB,CAAd;AACA,UAAM9B,eAAe,CAACzD,IAAD,EAAO+C,KAAP,CAArB;AACA;;AACD,QAAM6C,OAAO,GAAGjB,cAAKC,IAAL,CACftF,SADe,EAEf,KAFe,EAGf,SAHe,EAIfuG,MAAM,CAACP,IAAD,CAJS,EAKfO,MAAM,CAACN,KAAD,CALS,CAAhB;;AAOA,2BAAM,UAASK,OAAQ,GAAvB;AACA;;AAED,eAAeE,MAAf,GAAwB;AACvB,QAAMrG,EAAE,CAAC0F,IAAH,EAAN;AACA,QAAM,CAACG,IAAD,EAAOC,KAAP,IAAgB,MAAM,0BAA5B;AACA,QAAM,CAAC3F,OAAD,EAAUI,IAAV,IAAkB,MAAML,cAAc,EAA5C;AACA,QAAMoG,QAAQ,GAAG,KAAjB;;AACA,MAAIA,QAAJ,EAAc;AACb,UAAMd,cAAc,CAACjF,IAAD,CAApB;AACA;;AAED,QAAMqF,gBAAgB,CAACrF,IAAD,EAAOsF,IAAP,EAAaC,KAAb,CAAtB;AACA3F,EAAAA,OAAO,CAACoG,KAAR;AACA;;AAEDF,MAAM,G,CAEN;AACA","sourcesContent":["#!/usr/bin/env node\n\nimport { JSONFile, Low } from 'lowdb'\n// lowdb\nimport { dirname, join } from 'path'\nimport { makeLocalFolder, writeLocalFile } from './utilities'\n\nimport { exec } from 'child_process'\n// import { fileURLToPath } from 'url'\nimport fsSync from 'fs'\nimport { htmlToText } from 'html-to-text'\nimport openFileExplorer from 'open-file-explorer'\nimport parseInput from './cli-options'\nimport path from 'path'\nimport puppeteer from 'puppeteer'\n\nconst createCsvWriter = require('csv-writer').createArrayCsvWriter\n\nconst fs = fsSync.promises\nrequire('dotenv').config()\n\n// Use JSON file for storage\nconst file = join(__dirname, '/..', 'db.json')\nconst adapter = new JSONFile(file)\nconst db = new Low(adapter)\n\n// set default data\n// db.data ||= { posts: {} }\n// db.write()\n\nasync function setUpPuppeteer() {\n\tconst browser = await puppeteer.launch({ headless: false })\n\tconst page = await browser.newPage()\n\t// Show console logs from within page.evaluate\n\tpage.on('console', (msg) => {\n\t\tfor (let i = 0; i < msg.args().length; ++i)\n\t\t\tconsole.log(`${i}: ${msg.args()[i]}`)\n\t})\n\treturn [browser, page]\n}\n\nasync function signIn(page) {\n\tawait page.waitForSelector('input[name=\"username\"]')\n\tawait page.type('input[name=\"username\"]', process.env.USERNAME)\n\tawait page.type('input[name=\"password\"]', process.env.PASSWORD)\n\tawait Promise.all([\n\t\t// Wait for click that triggers navigation\n\t\tpage.waitForNavigation({ waitUntil: 'domcontentloaded' }),\n\t\tpage.click('input[name=\"login\"]'),\n\t])\n\tawait page.waitForSelector('.maintitle')\n}\n\nasync function getListOfPosts(page) {\n\treturn await await page.evaluate(() => {\n\t\tconst elements = document.querySelectorAll('.row3 .name')\n\t\tconst results = []\n\t\tfor (const el of elements) {\n\t\t\tconst author = el.firstChild.innerText\n\t\t\tconst numReplies = el.parentNode.parentNode.querySelectorAll(\n\t\t\t\t'span.postdetails a[href^=\"postings_popup.php\"]',\n\t\t\t)[0].innerText\n\t\t\tconst title =\n\t\t\t\tel.parentNode.parentNode.querySelectorAll('a.topictitle')[0].innerText\n\t\t\tconst url =\n\t\t\t\tel.parentNode.parentNode.querySelectorAll('a.topictitle')[0].href\n\n\t\t\t// date\n\t\t\tconst regex = RegExp(/\\d\\d-\\d\\d-\\d{4}/)\n\t\t\tconst originalDateString = regex.exec(title)[0]\n\t\t\tconst [monthString, dayString, yearString] = originalDateString.split('-')\n\t\t\tconst dateString = yearString + '-' + monthString + '-' + dayString\n\t\t\tresults.push([title, author, numReplies, url, dateString])\n\t\t}\n\t\treturn results\n\t})\n}\n\nasync function getAnalysisPostsForPage(page) {\n\tconst posts = await getListOfPosts(page)\n\treturn await posts.filter(([title, author, numReplies]) => {\n\t\tfunction titleDoesNotContain() {\n\t\t\tconst args = [].slice.call(arguments)\n\t\t\treturn args.every(\n\t\t\t\t(string) => !title.toLowerCase().includes(string.toLowerCase()),\n\t\t\t)\n\t\t}\n\n\t\treturn (\n\t\t\t(titleDoesNotContain('no webinar', 'holiday') && author === 'AlBrooks') ||\n\t\t\t(author === 'BPAAdmin' && numReplies > 0)\n\t\t)\n\t})\n}\n\nasync function savePostsToCSVs(page, analysisPosts) {\n\tfor (const [i, post] of analysisPosts.entries()) {\n\t\tconst { url, dateString } = post\n\t\tconst [yearString, monthString, dayString] = dateString.split('-')\n\t\tif (\n\t\t\tdb.data.daySavedAsCSV.includes(\n\t\t\t\tyearString + '-' + monthString + '-' + dayString,\n\t\t\t)\n\t\t) {\n\t\t\tprocess.stdout.write(\n\t\t\t\t`Post ${i + 1} of ${analysisPosts.length} already exists.\\r`,\n\t\t\t)\n\t\t\tcontinue\n\t\t}\n\t\tprocess.stdout.write(`Scraping post ${i + 1} of ${analysisPosts.length}\\r`)\n\n\t\tawait page.goto(url)\n\t\tawait page\n\t\t\t.waitForSelector('div.quote')\n\t\t\t.catch((err) =>\n\t\t\t\terror.log('Error looking for quote block... is this an old post?', err),\n\t\t\t)\n\t\t// first quote:\n\t\t//   each bar is after a <br>\n\t\tconst analysisHTML = await page.evaluate(\n\t\t\t() => document.querySelectorAll('div.quote')[0].innerHTML,\n\t\t)\n\t\tconst splitAnalysisHTML = analysisHTML.split('<br>')\n\t\tconst analysis = splitAnalysisHTML.map((string) => [htmlToText(string)])\n\n\t\tawait makeLocalFolder(yearString, monthString)\n\t\tconst filePath = path.join(\n\t\t\t__dirname,\n\t\t\t'/..',\n\t\t\t'exports',\n\t\t\tyearString,\n\t\t\tmonthString,\n\t\t\t`${yearString}-${monthString}-${dayString}.csv`,\n\t\t)\n\t\tconst csvWriter = createCsvWriter({\n\t\t\tpath: filePath,\n\t\t\theader: [url],\n\t\t})\n\t\tawait csvWriter.writeRecords(analysis)\n\t\tif (!db.data.monthSavedAsCSV.includes(yearString + '-' + monthString))\n\t\t\tdb.data.monthSavedAsCSV.push(yearString + '-' + monthString)\n\n\t\t// checked for daySaved at top\n\t\tdb.data.daySavedAsCSV.push(yearString + '-' + monthString + '-' + dayString)\n\t\tawait db.write()\n\t}\n}\n\nasync function scrapeAllPages(page, onlyFirstPage) {\n\tawait db.read()\n\tconst finalIndex = onlyFirstPage ? 0 : 3150\n\t// for (let i = 0; i < 3150; i += 50) {\n\tfor (let i = 0; i < finalIndex; i += 50) {\n\t\tif (i === 0) {\n\t\t\tawait page.goto('https://www.brookspriceaction.com/viewforum.php?f=1')\n\t\t\tawait signIn(page)\n\t\t} else {\n\t\t\tawait page.goto(\n\t\t\t\t`https://www.brookspriceaction.com/viewforum.php?f=1&topicdays=0&start=${i}`,\n\t\t\t)\n\t\t}\n\t\tconst analysisPosts = await getAnalysisPostsForPage(page)\n\t\tfor (const post of analysisPosts) {\n\t\t\tconst [, , , url, dateString] = post\n\t\t\tconsole.log(url, dateString)\n\t\t\tconst [yearString, monthString, dayString] = dateString.split('-')\n\t\t\tif (!db.data.posts[yearString]) {\n\t\t\t\tdb.data.posts[yearString] = {}\n\t\t\t\tawait db.write()\n\t\t\t}\n\t\t\tif (!db.data.posts[yearString][monthString]) {\n\t\t\t\tdb.data.posts[yearString][monthString] = []\n\t\t\t\tawait db.write()\n\t\t\t}\n\t\t\tdb.data.posts[yearString][monthString].push({\n\t\t\t\turl,\n\t\t\t\tdateString,\n\t\t\t})\n\t\t\tawait db.write()\n\t\t}\n\t\t// const [title, author, numReplies, url, dateString] = analysisPosts\n\t}\n}\n\nasync function getPostsForMonth(page, year, month) {\n\t// if current month, scrape 1st page, redownload CSVs\n\tconst currentMonth = new Date().getMonth() + 1\n\tconst monthIsCurrentMonth = currentMonth === month\n\t// if CSV not saved already, fetch it\n\tif (monthIsCurrentMonth) {\n\t\t// ! duplicated START (1/2)\n\t\tprocess.stdout.write('Signing in...\\r')\n\t\tawait page.goto('https://www.brookspriceaction.com/viewforum.php?f=1')\n\t\tawait signIn(page)\n\t\t// ! duplicated END\n\n\t\tprocess.stdout.write(\n\t\t\t'Scraping page 1 because searching for current month...',\n\t\t)\n\t\tawait scrapeAllPages(page, true)\n\t\tconsole.log('pages scraped')\n\t\tconst posts = db.data.posts[year][month]\n\t\tawait savePostsToCSVs(page, posts)\n\t\tconsole.log('posts saved')\n\t} else if (db.data.monthSavedAsCSV.includes(year + '-' + month)) {\n\t\t// open folder\n\t\tconsole.log('csv files already exist... opening')\n\t} else {\n\t\t// ! duplicated START (2/2)\n\t\tprocess.stdout.write('Signing in...\\r')\n\t\tawait page.goto('https://www.brookspriceaction.com/viewforum.php?f=1')\n\t\tawait signIn(page)\n\t\t// ! duplicated END\n\t\tconst posts = db.data.posts[year][month]\n\t\tawait savePostsToCSVs(page, posts)\n\t}\n\tconst dirPath = path.join(\n\t\t__dirname,\n\t\t'/..',\n\t\t'exports',\n\t\tString(year),\n\t\tString(month),\n\t)\n\texec(`start \"${dirPath}\"`)\n}\n\nasync function scrape() {\n\tawait db.read()\n\tconst [year, month] = await parseInput()\n\tconst [browser, page] = await setUpPuppeteer()\n\tconst scraping = false\n\tif (scraping) {\n\t\tawait scrapeAllPages(page)\n\t}\n\n\tawait getPostsForMonth(page, year, month)\n\tbrowser.close()\n}\n\nscrape()\n\n// todo:\n// automatically remove daySavedAsCSV entires for past months\n"],"file":"index.js"}